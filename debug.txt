# 1 "./sys/arch/riscv32/riscv32/kernel.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 364 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./sys/arch/riscv32/riscv32/kernel.c" 2
# 33 "./sys/arch/riscv32/riscv32/kernel.c"
# 1 "./sys/arch/riscv32/riscv32/../include/_types.h" 1
# 38 "./sys/arch/riscv32/riscv32/../include/_types.h"
# 1 "./sys/arch/riscv32/riscv32/../include/../../../sys/_null.h" 1
# 39 "./sys/arch/riscv32/riscv32/../include/_types.h" 2
# 64 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long long __int64_t;

typedef unsigned long long __uint64_t;


typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;


typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;
# 108 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef long __intptr_t;
typedef unsigned long __uintptr_t;


typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;


typedef long __register_t;


typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;


typedef double __double_t;
typedef float __float_t;
typedef long __ptrdiff_t;
typedef unsigned long __size_t;
typedef long __ssize_t;

typedef __builtin_va_list __va_list;
# 141 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef int __wchar_t;


typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
# 165 "./sys/arch/riscv32/riscv32/../include/_types.h"
int strcmp(const char* s1, const char* s2);

void printf(const char* fmt, ...);
# 34 "./sys/arch/riscv32/riscv32/kernel.c" 2
# 1 "./sys/arch/riscv32/riscv32/../include/sbi.h" 1
# 35 "./sys/arch/riscv32/riscv32/../include/sbi.h"
struct sbiret {
        long error;
        long value;
};
# 35 "./sys/arch/riscv32/riscv32/kernel.c" 2
# 1 "./sys/arch/riscv32/riscv32/../include/cpu.h" 1
# 36 "./sys/arch/riscv32/riscv32/../include/cpu.h"
struct trap_frame {
        __uint32_t ra;
        __uint32_t gp;
        __uint32_t tp;
        __uint32_t t0;
        __uint32_t t1;
        __uint32_t t2;
        __uint32_t t3;
        __uint32_t t4;
        __uint32_t t5;
        __uint32_t t6;
        __uint32_t a0;
        __uint32_t a1;
        __uint32_t a2;
        __uint32_t a3;
        __uint32_t a4;
        __uint32_t a5;
        __uint32_t a6;
        __uint32_t a7;
        __uint32_t s0;
        __uint32_t s1;
        __uint32_t s2;
        __uint32_t s3;
        __uint32_t s4;
        __uint32_t s5;
        __uint32_t s6;
        __uint32_t s7;
        __uint32_t s8;
        __uint32_t s9;
        __uint32_t s10;
        __uint32_t s11;
        __uint32_t sp;
} __attribute__((packed));
# 36 "./sys/arch/riscv32/riscv32/kernel.c" 2

# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/libkern.h" 1
# 38 "./sys/arch/riscv32/riscv32/../../../lib/libkern/libkern.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h" 1
# 44 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/cdefs.h" 1
# 42 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/cdefs.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/../arch/riscv32/include/cdefs.h" 1
# 43 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/cdefs.h" 2
# 45 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h" 2

# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/endian.h" 1
# 42 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/endian.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_endian.h" 1
# 37 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_endian.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_types.h" 1
# 40 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_types.h"
typedef __int64_t __blkcnt_t;
typedef __int32_t __blksize_t;
typedef __int64_t __clock_t;
typedef __int32_t __clockid_t;
typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint64_t __fsblkcnt_t;
typedef __uint64_t __fsfilcnt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint64_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int64_t __off_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint8_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef long __suseconds_t;
typedef __int64_t __time_t;
typedef __int32_t __timer_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;





typedef union {
        char __mbstate8[128];
        __int64_t __mbstateL;
} __mbstate_t;
# 38 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_endian.h" 2


# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/../arch/riscv32/include/endian.h" 1
# 27 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/../arch/riscv32/include/endian.h"
# 1 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/endian.h" 1
# 28 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/../arch/riscv32/include/endian.h" 2
# 41 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_endian.h" 2
# 68 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/_endian.h"
static __inline __uint16_t
__swap16md(__uint16_t x)
{
 return ((__uint16_t)(((__uint16_t)(x) & 0xffU) << 8 | ((__uint16_t)(x) & 0xff00U) >> 8));
}

static __inline __uint32_t
__swap32md(__uint32_t x)
{
 return ((__uint32_t)(((__uint32_t)(x) & 0xff) << 24 | ((__uint32_t)(x) & 0xff00) << 8 | ((__uint32_t)(x) & 0xff0000) >> 8 | ((__uint32_t)(x) & 0xff000000) >> 24));
}

static __inline __uint64_t
__swap64md(__uint64_t x)
{
 return ((__uint64_t)((((__uint64_t)(x) & 0xff) << 56) | ((__uint64_t)(x) & 0xff00ULL) << 40 | ((__uint64_t)(x) & 0xff0000ULL) << 24 | ((__uint64_t)(x) & 0xff000000ULL) << 8 | ((__uint64_t)(x) & 0xff00000000ULL) >> 8 | ((__uint64_t)(x) & 0xff0000000000ULL) >> 24 | ((__uint64_t)(x) & 0xff000000000000ULL) >> 40 | ((__uint64_t)(x) & 0xff00000000000000ULL) >> 56));
}
# 43 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/endian.h" 2
# 47 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h" 2





typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

typedef __cpuid_t cpuid_t;
typedef __register_t register_t;
# 76 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h"
typedef __int8_t int8_t;




typedef __uint8_t uint8_t;




typedef __int16_t int16_t;




typedef __uint16_t uint16_t;




typedef __int32_t int32_t;




typedef __uint32_t uint32_t;




typedef __int64_t int64_t;




typedef __uint64_t uint64_t;



typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef __int64_t quad_t;
typedef __uint64_t u_quad_t;



typedef __vaddr_t vaddr_t;
typedef __paddr_t paddr_t;
typedef __vsize_t vsize_t;
typedef __psize_t psize_t;



typedef __blkcnt_t blkcnt_t;
typedef __blksize_t blksize_t;
typedef char * caddr_t;
typedef __int32_t daddr32_t;
typedef __int64_t daddr_t;
typedef __dev_t dev_t;
typedef __fixpt_t fixpt_t;
typedef __gid_t gid_t;
typedef __id_t id_t;
typedef __ino_t ino_t;
typedef __key_t key_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __rlim_t rlim_t;
typedef __segsz_t segsz_t;
typedef __uid_t uid_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;






typedef __clock_t clock_t;




typedef __clockid_t clockid_t;




typedef __pid_t pid_t;




typedef __size_t size_t;




typedef __ssize_t ssize_t;




typedef __time_t time_t;




typedef __timer_t timer_t;




typedef __off_t off_t;
# 204 "./sys/arch/riscv32/riscv32/../../../lib/libkern/../../sys/types.h"
off_t lseek(int, off_t, int);
int ftruncate(int, off_t);
int truncate(const char *, off_t);
# 39 "./sys/arch/riscv32/riscv32/../../../lib/libkern/libkern.h" 2


size_t strlcpy(char *, const char *, int)
__attribute__ ((__bounded__(__string__,1,3)));


void *memset(void *buf, char c, size_t n);


void *memcpy(void *dst, const void *src, size_t n);


int strcmp(const char* s1, const char* s2);
# 38 "./sys/arch/riscv32/riscv32/kernel.c" 2




extern int __bss[], __bss_end[], __stack_top[];




struct sbiret sbi_call(long arg0, long arg1, long arg2, long arg3, long arg4,
                       long arg5, long fid, long eid) {
        register long a0 __asm__("a0") = arg0;
        register long a1 __asm__("a1") = arg1;
        register long a2 __asm__("a2") = arg2;
        register long a3 __asm__("a3") = arg3;
        register long a4 __asm__("a4") = arg4;
        register long a5 __asm__("a5") = arg5;
        register long a6 __asm__("a6") = fid;
        register long a7 __asm__("a7") = eid;







        __asm__ __volatile__("ecall"
                : "=r"(a0), "=r"(a1)
                : "r"(a0), "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5),
                "r"(a6), "r"(a7)
                : "memory");
        return (struct sbiret){.error = a0, .value = a1};
}




void
putchar(int ch)
{
        sbi_call(ch, 0, 0, 0, 0, 0, 0, 1 );
}




__attribute__((naked))
__attribute__((aligned(4)))
void
kernel_entry(void)
{




        __asm__ __volatile__(
                "csrw sscratch, sp\n"
                "addi sp, sp, -4 * 31\n"
                "sw ra,  4 * 0(sp)\n"
                "sw gp,  4 * 1(sp)\n"
                "sw tp,  4 * 2(sp)\n"
                "sw t0,  4 * 3(sp)\n"
                "sw t1,  4 * 4(sp)\n"
                "sw t2,  4 * 5(sp)\n"
                "sw t3,  4 * 6(sp)\n"
                "sw t4,  4 * 7(sp)\n"
                "sw t5,  4 * 8(sp)\n"
                "sw t6,  4 * 9(sp)\n"
                "sw a0,  4 * 10(sp)\n"
                "sw a1,  4 * 11(sp)\n"
                "sw a2,  4 * 12(sp)\n"
                "sw a3,  4 * 13(sp)\n"
                "sw a4,  4 * 14(sp)\n"
                "sw a5,  4 * 15(sp)\n"
                "sw a6,  4 * 16(sp)\n"
                "sw a7,  4 * 17(sp)\n"
                "sw s0,  4 * 18(sp)\n"
                "sw s1,  4 * 19(sp)\n"
                "sw s2,  4 * 20(sp)\n"
                "sw s3,  4 * 21(sp)\n"
                "sw s4,  4 * 22(sp)\n"
                "sw s5,  4 * 23(sp)\n"
                "sw s6,  4 * 24(sp)\n"
                "sw s7,  4 * 25(sp)\n"
                "sw s8,  4 * 26(sp)\n"
                "sw s9,  4 * 27(sp)\n"
                "sw s10, 4 * 28(sp)\n"
                "sw s11, 4 * 29(sp)\n"
        );




        __asm__ __volatile__("csrr a0, sscratch\n");




        __asm__ __volatile__("mv a0, sp\n"
                "call handle_trap\n");





        __asm__ __volatile__(
                "lw ra,  4 * 0(sp)\n"
                "lw gp,  4 * 1(sp)\n"
                "lw tp,  4 * 2(sp)\n"
                "lw t0,  4 * 3(sp)\n"
                "lw t1,  4 * 4(sp)\n"
                "lw t2,  4 * 5(sp)\n"
                "lw t3,  4 * 6(sp)\n"
                "lw t4,  4 * 7(sp)\n"
                "lw t5,  4 * 8(sp)\n"
                "lw t6,  4 * 9(sp)\n"
                "lw a0,  4 * 10(sp)\n"
                "lw a1,  4 * 11(sp)\n"
                "lw a2,  4 * 12(sp)\n"
                "lw a3,  4 * 13(sp)\n"
                "lw a4,  4 * 14(sp)\n"
                "lw a5,  4 * 15(sp)\n"
                "lw a6,  4 * 16(sp)\n"
                "lw a7,  4 * 17(sp)\n"
                "lw s0,  4 * 18(sp)\n"
                "lw s1,  4 * 19(sp)\n"
                "lw s2,  4 * 20(sp)\n"
                "lw s3,  4 * 21(sp)\n"
                "lw s4,  4 * 22(sp)\n"
                "lw s5,  4 * 23(sp)\n"
                "lw s6,  4 * 24(sp)\n"
                "lw s7,  4 * 25(sp)\n"
                "lw s8,  4 * 26(sp)\n"
                "lw s9,  4 * 27(sp)\n"
                "lw s10, 4 * 28(sp)\n"
                "lw s11, 4 * 29(sp)\n"
        );




        __asm__ __volatile__("sret\n");
}






void
handle_trap(struct trap_frame* f __attribute__((unused)))
{



        __uint32_t scause = ({ unsigned long __tmp; __asm__ __volatile__("csrr %0, " "scause" : "=r"(__tmp)); __tmp; });
        __uint32_t stval = ({ unsigned long __tmp; __asm__ __volatile__("csrr %0, " "stval" : "=r"(__tmp)); __tmp; });
        __uint32_t user_pc = ({ unsigned long __tmp; __asm__ __volatile__("csrr %0, " "sepc" : "=r"(__tmp)); __tmp; });




        do { printf("PANIC: %s:%d: " "unexpected trap scause=%x, stval=%x, sepc=%x\n" "\n", "./sys/arch/riscv32/riscv32/kernel.c", 200, scause, stval, user_pc); while (1) {} } while (0);
}




void
kernel_main(void)
{



        memset(__bss, 0, (__size_t) __bss_end - (__size_t) __bss);




        printf("Hello Wolrld!\n");




        do { __uint32_t __tmp = ((__uint32_t) kernel_entry); __asm__ __volatile__("csrw " "stvec" ", %0" ::"r"(__tmp)); } while (0);




        __asm__ __volatile__("unimp");
# 239 "./sys/arch/riscv32/riscv32/kernel.c"
}




__attribute__((section(".text.boot")))
__attribute__((naked))
void
boot(void)
{



        __asm__ __volatile__(
                "mv sp, %[stack_top]\n"
                "j kernel_main\n"
                :
                : [stack_top] "r" (__stack_top)
        );
}
# 1 "./sys/arch/riscv32/riscv32/common.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 364 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./sys/arch/riscv32/riscv32/common.c" 2
# 33 "./sys/arch/riscv32/riscv32/common.c"
# 1 "./sys/arch/riscv32/riscv32/../include/_types.h" 1
# 38 "./sys/arch/riscv32/riscv32/../include/_types.h"
# 1 "./sys/arch/riscv32/riscv32/../include/../../../sys/_null.h" 1
# 39 "./sys/arch/riscv32/riscv32/../include/_types.h" 2
# 64 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long long __int64_t;

typedef unsigned long long __uint64_t;


typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;


typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;
# 108 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef long __intptr_t;
typedef unsigned long __uintptr_t;


typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;


typedef long __register_t;


typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;


typedef double __double_t;
typedef float __float_t;
typedef long __ptrdiff_t;
typedef unsigned long __size_t;
typedef long __ssize_t;

typedef __builtin_va_list __va_list;
# 141 "./sys/arch/riscv32/riscv32/../include/_types.h"
typedef int __wchar_t;


typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
# 165 "./sys/arch/riscv32/riscv32/../include/_types.h"
int strcmp(const char* s1, const char* s2);

void printf(const char* fmt, ...);
# 34 "./sys/arch/riscv32/riscv32/common.c" 2

void putchar(char ch);

void
printf(const char *fmt, ...)
{
        __builtin_va_list vargs;
        __builtin_va_start(vargs, fmt);

        while (*fmt) {
                if (*fmt == '%') {
                        fmt++;
                        switch (*fmt) {
                                case '\0':
                                        putchar('%');
                                goto end;
                                case '%':
                                        putchar('%');
                                break;
                                case 's': {
                                        const char *s = __builtin_va_arg(vargs, const char *);
                                        while (*s) {
                                                putchar(*s);
                                                s++;
                                        }
                                        break;
                                }
                                case 'd': {
                                        int value = __builtin_va_arg(vargs, int);
                                        if (value < 0) {
                                                putchar('-');
                                                value = -value;
                                        }

                                        int divisor = 1;
                                        while (value / divisor > 9)
                                                divisor *= 10;

                                        while (divisor > 0) {
                                                putchar('0' + value / divisor);
                                                value %= divisor;
                                                divisor /= 10;
                                        }

                                        break;
                                }
                                case 'x': {
                                        const int value = __builtin_va_arg(vargs, int);
                                        for (int i = 7; i >= 0; i--) {
                                                const int nibble = (value >> (i * 4)) & 0xf;
                                                putchar("0123456789abcdef"[nibble]);
                                        }
                                }
                                default: ;
                        }
                } else {
                        putchar(*fmt);
                }

                fmt++;
        }

        end:
            __builtin_va_end(vargs);
}
# 1 "./sys/lib/libkern/memset.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 364 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./sys/lib/libkern/memset.c" 2
# 1 "./sys/lib/libkern/libkern.h" 1
# 38 "./sys/lib/libkern/libkern.h"
# 1 "./sys/lib/libkern/../../sys/types.h" 1
# 44 "./sys/lib/libkern/../../sys/types.h"
# 1 "./sys/lib/libkern/../../sys/cdefs.h" 1
# 42 "./sys/lib/libkern/../../sys/cdefs.h"
# 1 "./sys/lib/libkern/../../sys/../arch/riscv32/include/cdefs.h" 1
# 43 "./sys/lib/libkern/../../sys/cdefs.h" 2
# 45 "./sys/lib/libkern/../../sys/types.h" 2

# 1 "./sys/lib/libkern/../../sys/endian.h" 1
# 42 "./sys/lib/libkern/../../sys/endian.h"
# 1 "./sys/lib/libkern/../../sys/_endian.h" 1
# 37 "./sys/lib/libkern/../../sys/_endian.h"
# 1 "./sys/lib/libkern/../../sys/_types.h" 1
# 38 "./sys/lib/libkern/../../sys/_types.h"
# 1 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h" 1
# 38 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h"
# 1 "./sys/lib/libkern/../../sys/../arch/riscv32/include/../../../sys/_null.h" 1
# 39 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h" 2
# 64 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h"
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long long __int64_t;

typedef unsigned long long __uint64_t;


typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;


typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;
# 108 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h"
typedef long __intptr_t;
typedef unsigned long __uintptr_t;


typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;


typedef long __register_t;


typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;


typedef double __double_t;
typedef float __float_t;
typedef long __ptrdiff_t;
typedef unsigned long __size_t;
typedef long __ssize_t;

typedef __builtin_va_list __va_list;
# 141 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h"
typedef int __wchar_t;


typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
# 165 "./sys/lib/libkern/../../sys/../arch/riscv32/include/_types.h"
int strcmp(const char* s1, const char* s2);

void printf(const char* fmt, ...);
# 39 "./sys/lib/libkern/../../sys/_types.h" 2

typedef __int64_t __blkcnt_t;
typedef __int32_t __blksize_t;
typedef __int64_t __clock_t;
typedef __int32_t __clockid_t;
typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint64_t __fsblkcnt_t;
typedef __uint64_t __fsfilcnt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint64_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int64_t __off_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint8_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef long __suseconds_t;
typedef __int64_t __time_t;
typedef __int32_t __timer_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;





typedef union {
        char __mbstate8[128];
        __int64_t __mbstateL;
} __mbstate_t;
# 38 "./sys/lib/libkern/../../sys/_endian.h" 2


# 1 "./sys/lib/libkern/../../sys/../arch/riscv32/include/endian.h" 1
# 27 "./sys/lib/libkern/../../sys/../arch/riscv32/include/endian.h"
# 1 "./sys/lib/libkern/../../sys/endian.h" 1
# 28 "./sys/lib/libkern/../../sys/../arch/riscv32/include/endian.h" 2
# 41 "./sys/lib/libkern/../../sys/_endian.h" 2
# 68 "./sys/lib/libkern/../../sys/_endian.h"
static __inline __uint16_t
__swap16md(__uint16_t x)
{
 return ((__uint16_t)(((__uint16_t)(x) & 0xffU) << 8 | ((__uint16_t)(x) & 0xff00U) >> 8));
}

static __inline __uint32_t
__swap32md(__uint32_t x)
{
 return ((__uint32_t)(((__uint32_t)(x) & 0xff) << 24 | ((__uint32_t)(x) & 0xff00) << 8 | ((__uint32_t)(x) & 0xff0000) >> 8 | ((__uint32_t)(x) & 0xff000000) >> 24));
}

static __inline __uint64_t
__swap64md(__uint64_t x)
{
 return ((__uint64_t)((((__uint64_t)(x) & 0xff) << 56) | ((__uint64_t)(x) & 0xff00ULL) << 40 | ((__uint64_t)(x) & 0xff0000ULL) << 24 | ((__uint64_t)(x) & 0xff000000ULL) << 8 | ((__uint64_t)(x) & 0xff00000000ULL) >> 8 | ((__uint64_t)(x) & 0xff0000000000ULL) >> 24 | ((__uint64_t)(x) & 0xff000000000000ULL) >> 40 | ((__uint64_t)(x) & 0xff00000000000000ULL) >> 56));
}
# 43 "./sys/lib/libkern/../../sys/endian.h" 2
# 47 "./sys/lib/libkern/../../sys/types.h" 2





typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

typedef __cpuid_t cpuid_t;
typedef __register_t register_t;
# 76 "./sys/lib/libkern/../../sys/types.h"
typedef __int8_t int8_t;




typedef __uint8_t uint8_t;




typedef __int16_t int16_t;




typedef __uint16_t uint16_t;




typedef __int32_t int32_t;




typedef __uint32_t uint32_t;




typedef __int64_t int64_t;




typedef __uint64_t uint64_t;



typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef __int64_t quad_t;
typedef __uint64_t u_quad_t;



typedef __vaddr_t vaddr_t;
typedef __paddr_t paddr_t;
typedef __vsize_t vsize_t;
typedef __psize_t psize_t;



typedef __blkcnt_t blkcnt_t;
typedef __blksize_t blksize_t;
typedef char * caddr_t;
typedef __int32_t daddr32_t;
typedef __int64_t daddr_t;
typedef __dev_t dev_t;
typedef __fixpt_t fixpt_t;
typedef __gid_t gid_t;
typedef __id_t id_t;
typedef __ino_t ino_t;
typedef __key_t key_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __rlim_t rlim_t;
typedef __segsz_t segsz_t;
typedef __uid_t uid_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;






typedef __clock_t clock_t;




typedef __clockid_t clockid_t;




typedef __pid_t pid_t;




typedef __size_t size_t;




typedef __ssize_t ssize_t;




typedef __time_t time_t;




typedef __timer_t timer_t;




typedef __off_t off_t;
# 204 "./sys/lib/libkern/../../sys/types.h"
off_t lseek(int, off_t, int);
int ftruncate(int, off_t);
int truncate(const char *, off_t);
# 39 "./sys/lib/libkern/libkern.h" 2


size_t strlcpy(char *, const char *, int)
__attribute__ ((__bounded__(__string__,1,3)));


void *memset(void *buf, char c, size_t n);


void *memcpy(void *dst, const void *src, size_t n);


int strcmp(const char* s1, const char* s2);
# 2 "./sys/lib/libkern/memset.c" 2

void *
memset(void *buf, char c, size_t n)
{
        __uint8_t *p = (__uint8_t *) buf;
        while (n--)
                *p++ = c;
        return buf;
}

OpenSBI v1.3.1
   ____                    _____ ____ _____
  / __ \                  / ____|  _ \_   _|
 | |  | |_ __   ___ _ __ | (___ | |_) || |
 | |  | | '_ \ / _ \ '_ \ \___ \|  _ < | |
 | |__| | |_) |  __/ | | |____) | |_) || |_
  \____/| .__/ \___|_| |_|_____/|___ /_____|
        | |
        |_|

Platform Name             : riscv-virtio,qemu
Platform Features         : medeleg
Platform HART Count       : 1
Platform IPI Device       : aclint-mswi
Platform Timer Device     : aclint-mtimer @ 10000000Hz
Platform Console Device   : uart8250
Platform HSM Device       : ---
Platform PMU Device       : ---
Platform Reboot Device    : sifive_test
Platform Shutdown Device  : sifive_test
Platform Suspend Device   : ---
Platform CPPC Device      : ---
Firmware Base             : 0x80000000
Firmware Size             : 190 KB
Firmware RW Offset        : 0x20000
Firmware RW Size          : 62 KB
Firmware Heap Offset      : 0x27000
Firmware Heap Size        : 34 KB (total), 2 KB (reserved), 8 KB (used), 23 KB (free)
Firmware Scratch Size     : 4096 B (total), 464 B (used), 3632 B (free)
Runtime SBI Version       : 1.0

Domain0 Name              : root
Domain0 Boot HART         : 0
Domain0 HARTs             : 0*
Domain0 Region00          : 0x02000000-0x0200ffff M: (I,R,W) S/U: ()
Domain0 Region01          : 0x80020000-0x8002ffff M: (R,W) S/U: ()
Domain0 Region02          : 0x80000000-0x8001ffff M: (R,X) S/U: ()
Domain0 Region03          : 0x00000000-0xffffffff M: (R,W,X) S/U: (R,W,X)
Domain0 Next Address      : 0x80200000
Domain0 Next Arg1         : 0x87e00000
Domain0 Next Mode         : S-mode
Domain0 SysReset          : yes
Domain0 SysSuspend        : yes

Boot HART ID              : 0
Boot HART Domain          : root
Boot HART Priv Version    : v1.12
Boot HART Base ISA        : rv32imafdch
Boot HART ISA Extensions  : time,sstc
Boot HART PMP Count       : 16
Boot HART PMP Granularity : 4
Boot HART PMP Address Bits: 32
Boot HART MHPM Count      : 16
Boot HART MIDELEG         : 0x00001666
Boot HART MEDELEG         : 0x00f0b509
Hello Wolrld!
PANIC: ./sys/arch/riscv32/riscv32/kernel.c:200: unexpected trap scause=00000002, stval=00000000, sepc=80200110

QEMU 8.2.0 monitor - type 'help' for more information
(qemu) q[K
